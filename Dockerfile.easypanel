# Dockerfile otimizado para EasyPanel
FROM node:18-alpine as build

# Instalar dependências do sistema
RUN apk add --no-cache git

# Criar diretório de trabalho
WORKDIR /app

# Copiar arquivos de dependências
COPY package*.json ./

# Instalar dependências
RUN npm ci --only=production --silent

# Copiar código fonte
COPY . .

# Build da aplicação
RUN npm run build

# Estágio de produção com Nginx
FROM nginx:alpine

# Instalar wget para health checks
RUN apk add --no-cache wget

# Copiar arquivos buildados
COPY --from=build /app/dist /usr/share/nginx/html

# Copiar landing page
COPY --from=build /app/landing-page.html /usr/share/nginx/html/

# Configuração customizada do Nginx para EasyPanel
COPY nginx.easypanel.conf /etc/nginx/conf.d/default.conf

# Criar usuário não-root
RUN addgroup -g 1001 -S nginx
RUN adduser -S nginx -u 1001

# Ajustar permissões
RUN chown -R nginx:nginx /var/cache/nginx /var/run /var/log/nginx /usr/share/nginx/html
RUN chmod -R 755 /usr/share/nginx/html

# Usar usuário não-root
USER nginx

# Expor porta
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1

# Comando para iniciar o Nginx
CMD ["nginx", "-g", "daemon off;"]